############################################################
##########	NULL TEST
############################################################
Is Empty after init:	true
Inserting:	{}
Is Empty after Insert:	true
Print Tree:


PreOrder:	
InOrder:	
PostOrder:	
Is Empty after clear:	true



############################################################
##########	PERFECT BINARY TREE TEST
############################################################
Is Empty after init:	true
Inserting:	{10,5,3,8,7,9,2,4,15,13,18,17,19,12,14}
Is Empty after insert:	false
Print Tree:

                              19
                    18
                              17
          15
                              14
                    13
                              12
10
                              9
                    8
                              7
          5
                              4
                    3
                              2

PreOrder:	10, 5, 3, 2, 4, 8, 7, 9, 15, 13, 12, 14, 18, 17, 19, 
InOrder:	2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 
PostOrder:	2, 4, 3, 7, 9, 8, 5, 12, 14, 13, 17, 19, 18, 15, 10, 
Is Empty after clear:	true



############################################################
##########	NEGATIVE NUMBERS TEST
############################################################
Is Empty after init:	true
Inserting:	{-10,-1,-3,-8,-4,-29,-2,-14,-15,-13}
Is Empty after insert:	false
Print Tree:

          -1
                              -2
                    -3
                                        -4
                              -8
-10
                              -13
                    -14
                              -15
          -29

PreOrder:	-10, -29, -14, -15, -13, -1, -3, -8, -4, -2, 
InOrder:	-29, -15, -14, -13, -10, -8, -4, -3, -2, -1, 
PostOrder:	-15, -13, -14, -29, -4, -8, -2, -3, -1, -10, 
Is Empty after clear:	true



